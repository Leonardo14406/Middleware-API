// Prisma schema file for chatbot middleware service
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
}

///////////////////////////
// ENUMS
///////////////////////////

enum Platform {
  INSTAGRAM
  FACEBOOK
  WHATSAPP
  WEBSITE
}

///////////////////////////
// MODELS
///////////////////////////

// Business model for storing client business details and platform credentials
model Business {
  id                        String         @id @default(cuid())
  businessName              String
  email                     String         @unique
  password                  String
  chatbotId                 String

  // Platform credentials
  instagramUsername         String?        @unique
  facebookPageAccessToken   String?
  facebookVerifyToken       String?
  whatsappBearerToken       String?
  whatsappVerifyToken       String?

  // Polling info
  lastPolledAt              DateTime?      @default(now())

  // Timestamps
  createdAt                 DateTime       @default(now())
  updatedAt                 DateTime       @updatedAt

  // Relations
  sessions                  Session[]
  messages                  Message[]
  threadMetadata            ThreadMetadata[]

  @@map("businesses")
}

// Session model for storing Instagram/Facebook/WhatsApp auth state
model Session {
  id                String     @id @default(cuid())
  businessId        String
  platform          Platform
  serializedCookies String     @db.Text
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  expiresAt         DateTime?

  // Relations
  business          Business   @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([businessId, platform])
  @@map("sessions")
}

// Message model stores all inbound and outbound messages across platforms
model Message {
  id          String   @id @default(cuid())
  businessId  String
  platform    Platform
  threadId    String
  userId      String
  content     String   @db.Text
  isIncoming  Boolean  @default(true)
  timestamp   DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  threadMetadata ThreadMetadata @relation(fields: [businessId, platform, threadId], references: [businessId, platform, threadId], onDelete: Restrict)

  @@unique([businessId, platform, threadId, id])
  @@map("messages")
}


// ThreadMetadata model stores chat thread/session metadata
model ThreadMetadata {
  businessId String
  platform   Platform
  threadId   String

  isGroup           Boolean  @default(false)
  lastMessageId     String?
  lastProcessedAt   DateTime?
  users             Json     @default("[]")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Add reverse relation
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  messages Message[]

  @@id([businessId, platform, threadId])
  @@map("thread_metadata")
}