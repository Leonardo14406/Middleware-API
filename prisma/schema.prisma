// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model Business {
  id           String    @id @default(cuid())
  businessName String
  email        String    @unique
  password     String
  chatbotId    String
  instagramUsername   String?   @unique
  lastPolledAt DateTime? @default(now())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  facebookAccessToken String?
  facebookVerifyToken String?
  whatsappBearerToken String? 
  whatsappVerifyToken String?
  instagramPassword   String?

  // Relations
  sessions   Session[]
  messages   Message[]

  @@map("businesses")
}

model Session {
  id                String    @id @default(cuid())
  businessId        String
  platform          Platform
  serializedCookies String    @db.Text
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  expiresAt         DateTime?  @default(dbgenerated("now() + interval '30 days'"))

  // Relations
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([businessId, platform]) // One session per platform per business
  @@map("sessions")
}

model Message {
  id         String    @id @default(cuid())
  businessId String
  threadId   String
  messageId  String
  content    String    @db.Text
  isIncoming Boolean   @default(true)
  timestamp  DateTime  @default(now())
  createdAt  DateTime  @default(now())

  // Relations
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("messages")
}

// Enums
enum Platform {
  INSTAGRAM
  FACEBOOK
  WHATSAPP
  WEBSITE
}
